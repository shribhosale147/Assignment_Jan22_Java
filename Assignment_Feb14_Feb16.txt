**********************************************************************************************************************************************************************************
14-02-2022
**********************************************************************************************************************************************************************************
1.) https://leetcode.com/problems/number-of-students-doing-homework-at-a-given-time/
class Demo {
    public int busyStudent(int[] startTime, int[] endTime, int queryTime) {
        int count=0;
        for(int i=0;i<startTime.length;i++){
            if(startTime[i]<=queryTime && endTime[i]>=queryTime){
                count++;
            }
        }
        return count;
    }
}


2.) https://leetcode.com/problems/running-sum-of-1d-array/
class Demo {
    public int[] runningSum(int[] nums) {
        for(int i=1;i<nums.length;i++){
            nums[i]+=nums[i-1];
        }
        return nums;
    }
}


3.)  Given two arrays, find the intersection between them?
        Input : int[]  arr1 = {1, 2, 3, 4, 5, 6};
                 int[] arr2 = {2, 3, 4, 7, 8};
        Output : { 2, 3, 4}

public static void arrInt(int arr[], int arr1[]){
        int temp[]=new int[arr1.length];
        int k=0;
        for (int i = 0; i <arr.length ; i++) {
            for (int j = 0; j <arr1.length ; j++) {
                if(arr[i]==arr1[j]){
                    temp[k]=arr1[j];
                    k++;
                }
            }
        }
        for (int i = 0; i <k ; i++) {
            System.out.print(temp[i]+" ");
        }

    }

4.)  Write a program to find second largest element in a given Array in java?"
class Demo {
    public int busyStudent(int[] startTime, int[] endTime, int queryTime) {
        int count=0;
        for(int i=0;i<startTime.length;i++){
            if(startTime[i]<=queryTime && endTime[i]>=queryTime){
                count++;
            }
        }
        return count;
    }
}

**********************************************************************************************************************************************************************************
15-02-2022
**********************************************************************************************************************************************************************************
"1. add two 2D matrices to get the result matrix (Add the elements at corresponding rows and columns positions)

public class Main
{
    public static void arrMatrixAdd(int arr[][], int arr1[][]){
        int res[][]=new int[arr.length][arr[0].length];
        if(arr.length!=arr1.length){
            return;
        }else{
            for (int i=0;i<arr.length; i++){
                for(int j=0;j<arr[0].length;j++){
                    res[i][j]=arr[i][j]+arr1[i][j];
                }
            } 
        }
        for (int p=0;p<res.length; p++){
                for(int q=0;q<res[0].length;q++){
                    System.out.print(res[p][q]+" ");
                }
                System.out.println();
            } 
        
    }
	public static void main(String[] args) {
		int arr[][]={{1,5,7},
                    {2,6,8},
                    {5,8,2}};
        int arr1[][]={{1,3,4},
                    {2,1,4},
                    {7,6,9}};
        arrMatrixAdd(arr,arr1);
	}
}

2. Given an M Ã— N integer matrix, print it in spiral order
   Input:
 
	[  1   2   3   4  5 ]
	[ 16  17  18  19  6 ]
	[ 15  24  25  20  7 ]
	[ 14  23  22  21  8 ]
	[ 13  12  11  10  9 ]
 
	Output:
 
		1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25

	private static void printMatrixInSpiralOrder(int[][] mat) {
		int top = 0, left = 0, bottom = mat.length - 1, right = mat[0].length - 1;
		if (mat == null || mat.length == 0 || left > right)
			return;
		while (top <= bottom && left <= right) {
			// for top row
			for (int i = left; i <= right; i++) {
				System.out.print(mat[top][i] + " ");
			}
			top++;
			if (top > bottom)
				return;
			// for right column
			for (int i = top; i <= bottom; i++) {
				System.out.print(mat[i][right] + " ");
			}
			right--;
			if (left > right)
				return;
			// print bottom
			for (int i = right; i >= left; i--) {
				System.out.print(mat[bottom][i] + " ");
			}
			bottom--;
			if (top > bottom)
				return;
			for (int i = bottom; i >= top; i--) {
				System.out.print(mat[i][left] + " ");
			}
			left++;
		}
	}

		
3.  Change all elements of row `i` and column `j` in a matrix to 0 if cell `(i, j)` is 0
	Input :
		[ 1  1  0  1  1 ]
		[ 1  1  1  1  1 ]
		[ 1  1  1  0  1 ]
		[ 1  1  1  1  1 ]
		[ 0  1  1  1  1 ]
 
	Output:
 
		[ 0  0  0  0  0 ]
		[ 0  1  0  0  1 ]
		[ 0  0  0  0  0 ]
		[ 0  1  0  0  1 ]
		[ 0  0  0  0  0 ]"

	private static void convertMatrix(int[][] mat) {
		if(mat.length==0)	return;
		int row=mat.length;
		int col=mat[0].length;
		for(int i=0;i<row;i++) {
			for(int j=0;j<col;j++) {
				if(mat[i][j]==0) {
					for(int k=0;k<row;k++) {
						if(mat[i][k]!=0)
							mat[i][k]=-1;
					}
					for (int l = 0; l < col; l++){
			            if (mat[l][j] != 0)
			                mat[l][j] = -1;
			        }
				}
			}
		}
		for (int i = 0; i < row; i++){
            for (int j = 0; j < col; j++){
                if (mat[i][j] == -1) {
                    mat[i][j] = 0;
                }
            }
        }
		print2DMatrix(mat);
}
**********************************************************************************************************************************************************************************
16-02-2022
**********************************************************************************************************************************************************************************
"1.Find the frequency of odd and even in given matrix

Input : 
[1  3  5]
[2  4  1]
[7  8  9]

Output :
Even = 3
Odd = 6

public class Demo{
    public static void matrixSymetric(int arr[][]) {


        int even=0,odd=0;
            for (int[] i:arr) {
                for (int j:i) {
                    if(j%2==0){
                        even++;
                    }else{
                        odd++;
                    }
                }
            }
        System.out.println("Even:"+even);
        System.out.println("Odd:"+odd);

    }
    public static void main(String args[]){
        int arr[][]={{1,3,5},{2,4,1},{7,8,9}};
        matrixSymetric(arr);
    }
}

2.Find the sum of anti diagonal elements in given matrix

Input :

[1 5 7]
[2 6 8]
[5 8 2]

Anti diagonal elements are = a[0][2] + a[1][1] + a[2][0]

Output : 18

public class Demo{
    public static void matrixAnti(int arr[][]) {


        int ant=0;
        for (int i=0;i<arr.length;i++){
            for (int j=arr[0].length-1;j>=0;j--){
                if(i+j==arr.length-1){
                    ant+=arr[i][j];
                }
            }
        }
        System.out.println("add: "+ant);
    }
    public static void main(String args[]){
        int arr[][]={{1,5,7},
                    {2,6,8},
                    {5,8,2}};
        matrixAnti(arr);
    }
}

3.Display the string represented by each row of given matrix.

Input:

[""Hello""  ""Geekster""]
[""Good""  ""Day""]

Output:
Row 0 : HelloGeekster
Row 1 : GoodDay
	private static void printMatrixRow(String[][] mat) {
		int row=0;
		for(String[] val:mat) {
			System.out.println("Row "+(row++)+" : "+String.join("",val));
		}
	}
